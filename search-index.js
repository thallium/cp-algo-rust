var searchIndex = JSON.parse('{\
"rust_cp":{"doc":"","t":[0,14,14,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,3,11,11,12,11,11,11,11,11,11,11,12,12,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,5,5,0,0,0,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,3,18,8,4,4,6,6,6,8,8,8,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,0,8,16,16,8,8,16,10,11,10,10,11,10,10,8,8,8,8,10,10,10,10],"n":["data_structure","de","debug_single","graph","math","misc","string","traits","fenwick_tree","lazy_segtree","min_heap","segtree","sparse_table","union_find","FenwickTree","add","borrow","borrow_mut","from","from","into","new","partition_point","pref","search","sum","try_from","try_into","type_id","LazySegtree","all_prod","apply","apply_range","borrow","borrow_mut","default","fmt","from","from","get","into","max_right","min_left","new","prod","set","try_from","try_into","type_id","MinHeap","append","borrow","borrow_mut","clear","fmt","from","into","into_sorted_vec","is_empty","len","new","peek","pop","push","try_from","try_into","type_id","with_capacity","Segtree","all_prod","borrow","borrow_mut","default","from","from","get","into","max_right","min_left","new","prod","set","try_from","try_into","type_id","SparseTable","borrow","borrow_mut","from","from","get","into","try_from","try_into","type_id","UnionFind","borrow","borrow_mut","find","from","groups","into","is_same","join","new","size","try_from","try_into","type_id","binary_lifting","bipartite_matching","heavy_light_decomp","shortest_path","tarjan","BinaryLifting","borrow","borrow_mut","dep","dfs","dis","from","from","into","is_ancestor","lca","level","pa","tin","tout","try_from","try_into","type_id","AugmentedPath","add_edge","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","HLD","apply_path","apply_subtree","borrow","borrow_mut","data","from","get","into","new","path_prod","pos","set","subtree_prod","try_from","try_into","type_id","with_init_value","dijkstra","scc","factorial","internal_math","number_theory","Factorial","borrow","borrow_mut","choose","from","into","new","perm","try_from","try_into","type_id","ex_crt","ex_gcd","gcd","lcm","debug","input","modint","monoids","recursive_function","util","In","borrow","borrow_mut","bytes","chars","checked_read","from","i32","i64","into","new","read","try_from","try_into","type_id","usize","vec","Barrett","ButterflyCache","DefaultId","DynamicModInt","HINT_VALUE_IS_PRIME","Id","Mod1000000007","Mod998244353","ModInt","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly_cache","butterfly_cache","butterfly_cache","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","companion_barrett","companion_barrett","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","inv","inv","inv","inv","inv","modulus","modulus","modulus","modulus","modulus","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","product","product","product","product","raw","raw","raw","raw","raw","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","val","val","val","val","Additive","Max","Min","Multiplicative","binary_operation","binary_operation","binary_operation","binary_operation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","identity","identity","identity","identity","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Callable","Callable0","Callable2","Callable3","Callable4","Callable5","Callable6","Callable7","Callable8","Callable9","RecursiveFunction","RecursiveFunction0","RecursiveFunction2","RecursiveFunction3","RecursiveFunction4","RecursiveFunction5","RecursiveFunction6","RecursiveFunction7","RecursiveFunction8","RecursiveFunction9","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","call","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ceil_lg","lg","aho_corasick","kmp","z_algorithm","AhoCorasick","borrow","borrow_mut","build","find","find_all","find_cnt","from","from","insert","into","new","try_from","try_into","type_id","kmp","z_function","integral","monoid","numeric","Integral","F","M","MapMonoid","Monoid","S","binary_operation","binary_operation","composition","identity","identity_element","identity_map","mapping","BoundedAbove","BoundedBelow","One","Zero","max_value","min_value","one","zero"],"q":["rust_cp","","","","","","","","rust_cp::data_structure","","","","","","rust_cp::data_structure::fenwick_tree","","","","","","","","","","","","","","","rust_cp::data_structure::lazy_segtree","","","","","","","","","","","","","","","","","","","","rust_cp::data_structure::min_heap","","","","","","","","","","","","","","","","","","","rust_cp::data_structure::segtree","","","","","","","","","","","","","","","","","rust_cp::data_structure::sparse_table","","","","","","","","","","rust_cp::data_structure::union_find","","","","","","","","","","","","","","rust_cp::graph","","","","","rust_cp::graph::binary_lifting","","","","","","","","","","","","","","","","","","rust_cp::graph::bipartite_matching","","","","","","","","","","","rust_cp::graph::heavy_light_decomp","","","","","","","","","","","","","","","","","","rust_cp::graph::shortest_path","rust_cp::graph::tarjan","rust_cp::math","","","rust_cp::math::factorial","","","","","","","","","","","rust_cp::math::number_theory","","","","rust_cp::misc","","","","","","rust_cp::misc::input","","","","","","","","","","","","","","","","","rust_cp::misc::modintrust_cp::misc::monoids","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_cp::misc::recursive_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_cp::misc::util","","rust_cp::string","","","rust_cp::string::aho_corasick","","","","","","","","","","","","","","","rust_cp::string::kmp","rust_cp::string::z_algorithm","rust_cp::traits","","","rust_cp::traits::integral","rust_cp::traits::monoid","","","","","","","","","","","","rust_cp::traits::numeric","","","","","","",""],"d":["","","","","","","","","","","","","","","","Performs <code>data[idx] += val;</code>.","","","Returns the argument unchanged.","Construct a fenwick tree from <code>a</code> in linear time.","Calls <code>U::from(self)</code>.","Construct a fenwick tree of size n with default value of <code>T</code>.","Returns the index of the partition point according to the …","Returns <code>data[0] + ... + data[idx - 1]</code>.","Returns the index of the first element that is greater …","Returns <code>data[l] + ... + data[r - 1]</code>.","","","","Lazy segment tree using ac-library-rs’s implementation. …","Returns <code>op(a[0], ..., a[n - 1])</code>.","Applies <code>a[p] = f(a[p])</code>.","Applies <code>a[i] = f(a[i])</code>, for all <code>i</code> in <code>[l, r)</code>.","","","","","Creates an array initialized to <code>v</code>.","Returns the argument unchanged.","Returns <code>a[p]</code>","Calls <code>U::from(self)</code>.","Returns the maximum r such that …","Return the minimum index l such that …","Creates an array of length <code>n</code>. All the elements are …","Returns <code>op(a[l], ..., a[r - 1])</code> if l &lt; r, or identity …","Set <code>a[p] = x</code>","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Segment tree using ac-library-rs’s implementation. See …","Returns <code>op(a[0], ..., a[n - 1])</code>, assuming the properties …","","","","Creates an array a, initialized to v.","Returns the argument unchanged.","Returns <code>a[p]</code>.","Calls <code>U::from(self)</code>.","Returns the maximum r such that …","Return the minimum index l such that …","Creates an array a of length n. All the elements are …","Returns <code>op(a[l], ..., a[r - 1])</code>, assuming the properties …","Set <code>a[p] = x</code>.","","","","","","","Construct a sparse table from slice <code>v</code>.","Returns the argument unchanged.","get the result for [l, r)","Calls <code>U::from(self)</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","check if u is ancestor of v","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","n is the size of one vertex set, m is the size of the …","","","","","","","","","","","Returns the argument unchanged.","Returns the value of node <code>u</code>.","Calls <code>U::from(self)</code>.","","","","Sets the value of node <code>u</code> to <code>x</code>.","","","","","","","Find strongly connected components of graph g. Components …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Extended Chinese Remainder Theorem. It solves systems of …","returns a solution (x, y, g) to …","","","","","Structs that treat the modular arithmetic.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Pair of <em>m</em> and <em>ceil(2⁶⁴/m)</em>.","Cache for butterfly operations.","","Represents <em>ℤ/mℤ</em> where <em>m</em> is a dynamic value.","","","Represents <em>1000000007</em>.","Represents <em>998244353</em>.","","","","A trait for <code>StaticModInt</code> and <code>DynamicModInt</code>.","Represents a modulus.","A trait for <code>{StaticModInt, DynamicModInt, ModIntBase}::new</code>.","Represents <em>ℤ/mℤ</em> where <em>m</em> is a constant value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retruns the multiplicative inverse of <code>self</code>.","","Retruns the multiplicative inverse of <code>self</code>.","","Retruns the multiplicative inverse of <code>self</code>.","Returns the modulus.","Returns the modulus, which is <code>&lt;M as Modulus&gt;::VALUE</code>.","","","Returns the modulus.","","","","","","","","","","","","","","","","","Creates a new <code>Barrett</code>.","Creates a new <code>Self</code>.","Creates a new <code>StaticModInt</code>.","Creates a new <code>DynamicModInt</code>.","","","","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","","","","","Constructs a <code>Self</code> from a <code>val &lt; Self::modulus()</code> without …","","Constructs a <code>StaticModInt</code> from a <code>val &lt; Self::modulus()</code> …","","Constructs a <code>DynamicModInt</code> from a <code>val &lt; Self::modulus()</code> …","Calculates <code>self</code> <em>mod</em> <code>modulus</code> losslessly.","Sets a modulus.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retruns the representative.","Retruns the representative.","","Retruns the representative.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Corresponds to <code>std::is_integral</code> in C++.","","","","","","","","","","","","","","","Class that has multiplicative identity element","Class that has additive identity element","","","The multiplicative identity element","The additive identity element"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,12,13,13,13,14,14,14,13,13,13,14,14,14,15,16,13,17,18,14,19,15,16,13,17,18,14,19,12,17,18,13,17,18,14,19,13,17,18,14,19,17,18,19,20,19,16,13,14,13,13,13,14,14,14,13,13,13,14,14,14,13,17,18,14,19,13,13,17,18,14,14,19,15,16,13,13,17,18,14,14,19,13,14,13,17,18,14,19,15,16,13,17,18,14,19,21,13,13,14,14,21,13,13,14,14,13,13,13,14,14,14,13,13,13,14,14,14,13,14,13,14,16,21,13,14,17,18,19,21,13,14,13,13,14,14,21,13,13,14,14,22,14,13,13,13,14,14,14,13,13,13,14,14,14,13,13,14,14,13,17,18,14,19,13,14,15,16,13,17,18,14,19,15,16,13,17,18,14,19,15,16,13,17,18,14,19,21,13,13,14,14,0,0,0,0,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,23,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,27,28,29,30,31,32,33,34,35,36,0,0,0,0,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,48,48,0,0,49,49,48,48,49,48,48,48,0,0,0,0,50,51,52,53],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0],["clone",8]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["usize",0]]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],[[["",0],["",0]],["usize",0]],[[["",0],["usize",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["vec",3]]],[[]],[[["",0],["usize",0]]],[[]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["minheap",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["vec",3]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[],["minheap",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["usize",0]],["minheap",3]],null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["vec",3]]],[[]],[[["",0],["usize",0]]],[[]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["usize",0]],["segtree",3]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0],["usize",0],["usize",0]]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["usize",0]],[[]],[[["",0]],["vec",3,[["vec",3,[["usize",0]]]]]],[[]],[[["",0],["usize",0],["usize",0]],["bool",0]],[[["",0],["usize",0],["usize",0]],["bool",0]],[[["usize",0]]],[[["",0],["usize",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["vec",3],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["usize",0]],[[]],[[["vec",3],["usize",0]]],[[]],[[["",0],["usize",0],["usize",0]],["bool",0]],[[["",0],["usize",0],["usize",0]],["usize",0]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["usize",0],["usize",0]]],[[["",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[["",0],["usize",0]]],[[]],[[["vec",3],["usize",0]]],[[["",0],["usize",0],["usize",0]]],null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["vec",3],["usize",0],["vec",3]]],[[["vec",3],["usize",0]],["vec",3,[["option",4,[["usize",0]]]]]],[[["vec",3]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0],["usize",0]],["staticmodint",3]],[[]],[[]],[[["usize",0]]],[[["",0],["usize",0],["usize",0]],["staticmodint",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["vec",3],["vec",3],["vec",3]],["option",4]],[[["integral",8],["integral",8]]],[[["integral",8],["integral",8]],["integral",8]],[[["integral",8],["integral",8]],["integral",8]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["char",0]]]],[[["",0]],["option",4,[["fromstr",8]]]],[[]],[[["",0]],["i32",0]],[[["",0]],["i64",0]],[[]],[[["string",3]]],[[["",0]],["fromstr",8]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],[[["",0],["usize",0]],["vec",3,[["fromstr",8]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["staticmodint",3]],["staticmodint",3]],[[],["staticmodint",3]],[[["staticmodint",3]],["staticmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[],["dynamicmodint",3]],[[["",0]]],[[["",0],["staticmodint",3]]],[[["",0],["staticmodint",3]]],[[["",0],["dynamicmodint",3]]],[[["",0],["dynamicmodint",3]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["localkey",3]],[[],["localkey",3]],[[],["localkey",3]],[[["",0]],["staticmodint",3]],[[["",0]],["mod1000000007",4]],[[["",0]],["mod998244353",4]],[[["",0]],["dynamicmodint",3]],[[["",0]],["defaultid",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["mod1000000007",4]],["ordering",4]],[[["",0],["mod998244353",4]],["ordering",4]],[[["",0],["defaultid",4]],["ordering",4]],[[],["barrett",3]],[[],["barrett",3]],[[]],[[]],[[]],[[["staticmodint",3]],["staticmodint",3]],[[["staticmodint",3]],["staticmodint",3]],[[],["staticmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[],["dynamicmodint",3]],[[["",0]]],[[["",0],["staticmodint",3]]],[[["",0],["staticmodint",3]]],[[["",0]]],[[["",0],["dynamicmodint",3]]],[[["",0],["dynamicmodint",3]]],[[["",0],["staticmodint",3]],["bool",0]],[[["",0],["mod1000000007",4]],["bool",0]],[[["",0],["mod998244353",4]],["bool",0]],[[["",0],["dynamicmodint",3]],["bool",0]],[[["",0],["defaultid",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["infallible",4]]]],[[["str",0]],["result",4,[["infallible",4]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[["staticmodint",3]],["staticmodint",3]],[[["staticmodint",3]],["staticmodint",3]],[[],["staticmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[],["dynamicmodint",3]],[[["",0]]],[[["",0],["staticmodint",3]]],[[["",0],["staticmodint",3]]],[[["",0]]],[[["",0],["dynamicmodint",3]]],[[["",0],["dynamicmodint",3]]],[[["",0],["staticmodint",3]],["bool",0]],[[["",0],["dynamicmodint",3]],["bool",0]],[[],["staticmodint",3]],[[],["dynamicmodint",3]],[[["u32",0]]],[[["remeuclidu32",8]]],[[["remeuclidu32",8]]],[[["remeuclidu32",8]]],[[["",0],["mod1000000007",4]],["option",4,[["ordering",4]]]],[[["",0],["mod998244353",4]],["option",4,[["ordering",4]]]],[[["",0],["defaultid",4]],["option",4,[["ordering",4]]]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[]],[[]],[[]],[[]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]],["u32",0]],[[["u32",0]]],[[["staticmodint",3]],["staticmodint",3]],[[["staticmodint",3]],["staticmodint",3]],[[],["staticmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[["dynamicmodint",3]],["dynamicmodint",3]],[[],["dynamicmodint",3]],[[["",0],["staticmodint",3]]],[[["",0],["staticmodint",3]]],[[["",0]]],[[["",0]]],[[["",0],["dynamicmodint",3]]],[[["",0],["dynamicmodint",3]]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],null,null,null,null,[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullresult",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u32",0]],["u32",0]],[[["usize",0]],["u32",0]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["vec",3,[["option",4,[["usize",0]]]]]],[[["",0]],["vec",3,[["vec",3,[["usize",0]]]]]],[[["",0]],["vec",3,[["usize",0]]]],[[]],[[]],[[["",0],["usize",0]]],[[]],[[["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["usize",0]]]],[[],["vec",3,[["usize",0]]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]]],"p":[[3,"FenwickTree"],[3,"LazySegtree"],[3,"MinHeap"],[3,"Segtree"],[3,"SparseTable"],[3,"UnionFind"],[3,"BinaryLifting"],[3,"AugmentedPath"],[3,"HLD"],[3,"Factorial"],[3,"In"],[8,"Modulus"],[3,"StaticModInt"],[3,"DynamicModInt"],[3,"ButterflyCache"],[3,"Barrett"],[4,"Mod1000000007"],[4,"Mod998244353"],[4,"DefaultId"],[8,"Id"],[8,"ModIntBase"],[8,"RemEuclidU32"],[3,"Max"],[3,"Min"],[3,"Additive"],[3,"Multiplicative"],[3,"RecursiveFunction0"],[3,"RecursiveFunction"],[3,"RecursiveFunction2"],[3,"RecursiveFunction3"],[3,"RecursiveFunction4"],[3,"RecursiveFunction5"],[3,"RecursiveFunction6"],[3,"RecursiveFunction7"],[3,"RecursiveFunction8"],[3,"RecursiveFunction9"],[8,"Callable0"],[8,"Callable"],[8,"Callable2"],[8,"Callable3"],[8,"Callable4"],[8,"Callable5"],[8,"Callable6"],[8,"Callable7"],[8,"Callable8"],[8,"Callable9"],[3,"AhoCorasick"],[8,"MapMonoid"],[8,"Monoid"],[8,"BoundedAbove"],[8,"BoundedBelow"],[8,"One"],[8,"Zero"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};